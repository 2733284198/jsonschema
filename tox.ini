[tox]
envlist =
    py{35,36,37,38,py2,py3}-{build,tests,tests_nongpl},
    demo
    readme
    safety
    secrets
    style
    docs-{html,doctest,linkcheck,spelling,style}
skipsdist = True

[testenv]
changedir = 
    !build: {envtmpdir}
setenv =
    JSON_SCHEMA_TEST_SUITE = {toxinidir}/json
whitelist_externals =
    mkdir
commands =
    perf,tests: {envpython} -m pip install '{toxinidir}[format]'
    tests_nongpl: {envpython} -m pip install '{toxinidir}[format_nongpl]'

    tests,tests_nongpl: {envpython} -m twisted.trial {posargs:jsonschema}
    tests: {envpython} -m doctest {toxinidir}/README.rst

    perf: mkdir {envtmpdir}/benchmarks/
    perf: {envpython} {toxinidir}/jsonschema/benchmarks/issue232.py --inherit-environ JSON_SCHEMA_TEST_SUITE --output {envtmpdir}/benchmarks/issue232.json
    perf: {envpython} {toxinidir}/jsonschema/benchmarks/json_schema_test_suite.py --inherit-environ JSON_SCHEMA_TEST_SUITE --output {envtmpdir}/benchmarks/json_schema_test_suite.json

    # Check to make sure that releases build and install properly
    build: {envpython} -m pep517.check {toxinidir}
deps =
    build: pep517

    perf: pyperf

    tests,tests_nongpl,coverage,codecov: -r{toxinidir}/test-requirements.txt

    coverage,codecov: coverage
    codecov: codecov

[testenv:bandit]
deps = bandit
commands = {envbindir}/bandit --recursive {toxinidir}/jsonschema

[testenv:demo]
deps = jupyter
commands =
    {envbindir}/jupyter nbconvert --output-dir {envtmpdir} {toxinidir}/DEMO.ipynb

[testenv:readme]
deps =
    pep517
    twine
commands =
    {envpython} -m pep517.build --out-dir {envtmpdir}/dist {toxinidir}
    {envpython} -m twine check {envtmpdir}/dist/*

[testenv:safety]
deps = safety
commands =
    {envpython} -m pip install '{toxinidir}[format]'
    {envpython} -m safety check

[testenv:secrets]
deps = detect-secrets
commands = {envbindir}/detect-secrets scan {toxinidir}

[testenv:style]
basepython = pypy3
deps =
    ebb-lint>=0.19.1.0
commands =
    {envpython} -m flake8 {posargs} {toxinidir}/jsonschema {toxinidir}/docs {toxinidir}/setup.py

[testenv:coverage]
setenv =
    {[testenv]setenv}
    COVERAGE_DEBUG_FILE={envtmpdir}/coverage-debug
    COVERAGE_FILE={envtmpdir}/coverage-data
commands =
    {envpython} -m pip install '{toxinidir}[format]'
    {envpython} -m coverage run --rcfile={toxinidir}/.coveragerc -m twisted.trial jsonschema
    {envpython} -m coverage report --rcfile={toxinidir}/.coveragerc --show-missing
    {envpython} -m coverage html --directory={envtmpdir}/htmlcov --rcfile={toxinidir}/.coveragerc {posargs}

[testenv:docs-html]
basepython = pypy3
commands = {envpython} -m sphinx -b html {toxinidir}/docs/ {envtmpdir}/build {posargs:-a -n -q -T -W}
deps =
    -r{toxinidir}/docs/requirements.txt
    {toxinidir}

[testenv:docs-doctest]
basepython = pypy3
commands = {envpython} -m sphinx -b doctest {toxinidir}/docs/ {envtmpdir}/build {posargs:-a -n -q -T -W}
deps =
    -r{toxinidir}/docs/requirements.txt
    {toxinidir}

[testenv:docs-linkcheck]
basepython = pypy3
commands = {envpython} -m sphinx -b linkcheck {toxinidir}/docs/ {envtmpdir}/build {posargs:-a -n -q -T -W}
deps =
    -r{toxinidir}/docs/requirements.txt
    {toxinidir}

[testenv:docs-spelling]
basepython = pypy3
commands = {envpython} -m sphinx -b spelling {toxinidir}/docs/ {envtmpdir}/build {posargs:-a -n -q -T -W}
deps =
    -r{toxinidir}/docs/requirements.txt
    {toxinidir}

[testenv:docs-style]
basepython = pypy3
commands = doc8 {posargs} {toxinidir}/docs
deps =
    doc8
    pygments
    pygments-github-lexers

[testenv:codecov]
passenv = CODECOV* CI
setenv = {[testenv:coverage]setenv}
commands =
    {envpython} -m pip install '{toxinidir}[format]'
    {envpython} -m coverage run --rcfile={toxinidir}/.coveragerc -m twisted.trial jsonschema
    {envpython} -m coverage xml -o {envtmpdir}/coverage.xml
    codecov --required --disable gcov --file {envtmpdir}/coverage.xml

[testenv:check-package-license-file]
recreate = True
deps =
    pip-licenses
commands =
    pip install {toxinidir}
    pip-licenses --from=mixed --with-license-file --format=json --output-file={toxinidir}/license_report.json
    {envpython} {toxinidir}/test_license.py
